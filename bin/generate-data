#!/usr/bin/env babel-node

import fs from 'fs';
import request from 'request';
import path from 'path';
import nomnom from 'nomnom';
import process from 'process';
import cheerio from 'cheerio';
import countryjs from 'countryjs'
import continent from '../src/continent';

const exists = (filename) => fs.existsSync(filename)
  ? undefined
  : `${filename} does not exist`;

let { destination } = nomnom
  .script('generate-data')
  .option('destination', { required: true, callback: exists })
  .parse();

function fixCountryName(name) {
  const fixedNames = {
    'Korea, Süd': 'Südkorea',
    'Korea, Nord': 'Nordkorea',
    'Kongo, Demokratische Republik': 'Demokratische Republik Kongo',
    'Kongo, Republik': 'Republik Kongo'
  };
  return fixedNames[name] || name;
}

function getAlternativeNames(name) {
  const altNames = {
    'Vereinigtes Königreich': ['England', 'Großbritannien'],
    'Vereinigte Staaten': ['USA'],
    'Volksrepublik China': ['China'],
    'Republik China': ['Taiwan']
  };
  return altNames[name] || [];
}

function fixCapitalName(name) {
  if (name.toLowerCase() === "stadtstaat") {
    return;
  }

  return name;
}

request('https://de.wikipedia.org/wiki/Liste_der_Staaten_der_Erde', (error, response, body) => {
  // parse wikipedia table
  var $ = cheerio.load(body);
  var data = $('.wikitable tbody tr:not([class])').map((i, elem) => {
    const get = position => {
      let text = $(elem).children().eq(position).text();
      text = text.split('\n')[0];
      text = text.replace(/\[.*\]/, '');
      return text;
    };
    const toNumber = value => {
      value = value.replace(/\./g, '');
      return parseInt(value, 10);
    };
    const getFlag = size => 'https:' + $(elem).children().eq(6).find('img').attr('src').replace(/\/[0-9]*px-/, '/' + size + 'px-');
    const name = fixCountryName(get(0));
    return {
      name: name,
      longName: get(1),
      altNames: getAlternativeNames(name),
      capital: fixCapitalName(get(2)),
      population: toNumber(get(3)),
      //area: toNumber(get(4)),
      //populationPerSquareKm: toNumber(get(5)),
      flag: {
        smallImageUrl: getFlag(720),
        largeImageUrl: getFlag(1200),
      },
      iso3: /^[a-zA-Z]{3}$/.test(get(7)) && get(7),
      iso2: /^[a-zA-Z]{2}$/.test(get(8)) && get(8),
      //tld: get(9),
      //englishName: get(10),
      //localeNames: get(11).split(',').map(Function.prototype.call, String.prototype.trim)
    };
  }).get();

  // retrieve nation anthems
  request('https://de.wikipedia.org/wiki/Liste_der_Nationalhymnen', (error, response, body) => {
    // parse wikipedia table
    var $ = cheerio.load(body);
    var anthemData = $('.wikitable').first().find('tbody tr:not([class])').map((i, elem) => {
      const get = position => {
        let text = $(elem).children().eq(position).text();
        text = text.split('\n')[0];
        text = text.replace(/\[.*\]/, '');
        return text;
      };
      const getName = () => {
        let text = $(elem).children().eq(0).find('a').text();
        text = text.split('\n')[0];
        text = text.replace(/\[.*\]/, '');
        return text;
      };
      const getAudio = () => {
        const src = $(elem).children().eq(3).find('audio source').attr('src');
        return src ? `https:${src}` : undefined;
      };
      return {
        name: fixCountryName(getName()),
        anthemName: get(1),
        anthemNameGerman: get(2),
        audio: getAudio()
      };
    }).get();

    // amend with information from countryjs and national anthems
    for (let country of data) {
      const countryJsData = countryjs.info(country.iso3, 'ISO3');
      if (countryJsData) {
        country.region = continent.getTranslation(countryJsData.region);
        country.languages = countryJsData.languages;
        country.currencies = countryJsData.currencies;
        country.borders = countryJsData.borders;
      }

      const anthem = anthemData.filter(val => val.name == country.name);
      if (anthem.length === 1) {
        country.anthemName = anthem[0].anthemNameGerman;
        country.anthem = anthem[0].audio;
      }
    }

    // filter out countries without enough information
    data = data.filter(val => val.iso3);

    // write data.json file
    writeFile(data);
  });
});

function writeFile(all) {
  const dataFile = path.join(process.cwd(), destination, 'data.json');

  fs.writeFile(dataFile, JSON.stringify(all, null, 2), 'utf8', (err) => {
    if (err) {
      process.exit(1);
    }
  });
}